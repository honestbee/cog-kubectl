---
cog_bundle_version: 4
name: kubectl
description: Interact with Kubernetes
long_description: >
  This bundle provides commands for exposing kubectl commands through Chat.
  Permissions are used to control which users are authorized to run each command. Listing and searching
  for resources requires the kubectl:read permission. Modifying the state or other
  values of a resource requires the kubectl:write permission. And, destroying a
  resource requires the kubectl:admin permission.
version: 0.1.2
docker:
  image: quay.io/honestbee/cog-kubectl
  tag: 0.1.2
permissions:
  - kubectl:read
  - kubectl:write
  - kubectl:admin
config:
  notes: >
    When creating the service account for use with the following environment
    variables, make sure the RBAC role used has permissions as required.
  env:
    - var: KUBERNETES_TOKEN
      description: Requried service account token for Kubernetes API access
    - var: KUBERNETES_SERVER
      description: Required Kubernetes API endpoint
    - var: KUBERNETES_CERT
      description: Required Kubernetes API certificate for secure execution
commands:
  get:
    description: Display one or many resources.
    executable: /usr/local/bin/cog-command
    long_description: |
      Valid resource types include:

        * clusters (valid only for federation apiservers)
        * componentstatuses (aka 'cs')
        * configmaps (aka 'cm')
        * daemonsets (aka 'ds')
        * deployments (aka 'deploy')
        * endpoints (aka 'ep')
        * events (aka 'ev')
        * horizontalpodautoscalers (aka 'hpa')
        * ingresses (aka 'ing')
        * jobs
        * limitranges (aka 'limits')
        * namespaces (aka 'ns')
        * networkpolicies
        * nodes (aka 'no')
        * persistentvolumeclaims (aka 'pvc')
        * persistentvolumes (aka 'pv')
        * pods (aka 'po')
        * podsecuritypolicies (aka 'psp')
        * podtemplates
        * replicasets (aka 'rs')
        * replicationcontrollers (aka 'rc')
        * resourcequotas (aka 'quota')
        * secrets
        * serviceaccounts (aka 'sa')
        * services (aka 'svc')
        * statefulsets
        * storageclasses
        * thirdpartyresources

      This command will hide resources that have completed. For instance, pods that are in the Succeeded or Failed phases. You can see the full results for any resource by providing the '--show-all' flag.

      kubectl:get pods
    options:
      all-namespaces:
        type: bool
        required: false
        description: If present, list the requested object(s) across all namespaces.
      selector:
        type: list
        required: false
        description: Selector (label query) to filter on
        short_flag: l
      show-all:
        type: bool
        required: false
        description: When printing, show all resources (default hide terminated pods.)
        short_flag: a
      sort-by:
        type: string
        required: false
        description: If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression
    rules:
      - must have kubectl:read
  run:
    description: Create and run a particular image, possibly replicated.
    executable: /usr/local/bin/cog-command
    long_description: |
      Creates a deployment or job to manage the created container(s).

      kubectl:run nginx --image=nginx:1.11-alpine --port=80
    options:
      image:
        type: string
        required: true
        description: The image for the container to run.
      port:
        type: string
        required: false
        description: The port that this container exposes.  If --expose is true, this is also the port used by the service that is created.
      expose:
        type: bool
        required: false
        description: If true, a public, external service is created for the container(s) which are run
    rules:
      - must have kubectl:write
  expose:
    description: Expose a resource as a new Kubernetes service.
    executable: /usr/local/bin/cog-command
    long_description: |
      Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.

      Possible resources include (case insensitive):

      pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)

      kubectl expose deployment nginx --port=80 --container-port=8000
    arguments: "RESOUCE_TYPE RESOURCE_NAME"
    options:
      type:
        type: string
        required: false
        description: Type for this service (ClusterIP, NodePort, or LoadBalancer). Default is 'ClusterIP'.
      port:
        type: string
        required: false
        description: The port that the service should serve on. Copied from the resource being exposed, if unspecified
      target-port:
        type: string
        required: false
        description: Name or number for the port on the container that the service should direct traffic to. Optional.
    rules:
      - must have kubectl:write
  scale:
    description: Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.
    executable: /usr/local/bin/cog-command
    long_description: |
      Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.
      Scale also allows users to specify one or more preconditions for the scale action.

      If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.

      kubectl scale --current-replicas=2 --replicas=3 deployment/mysql
    arguments: "RESOUCE_TYPE/RESOURCE_NAME"
    options:
      replicas:
        type: string
        required: true
        description: The new desired number of replicas. Required.
      current-replicas:
        type: string
        required: false
        description: Precondition for current size. Requires that the current size of the resource match this value in order to scale.
    rules:
      - must have kubectl:write
  set-image:
    description: Update image of a pod template
    executable: /usr/local/bin/cog-sub-command
    long_description: |
      Update existing container image(s) of resources.

      Possible resources include (case insensitive):
        pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs)
    arguments: "RESOURCE_TYPE/RESOURCE_NAME CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N"
    rules:
      - must have kubectl:write
templates:
  resource_list:
    body: |
      ~each var=$results as=r~
      ~attachment color=$r.Color~
      **~$r.Kind~ Namespace:** ~$r.Namespace~
      **~$r.Kind~ Name:** ~$r.Name~
      ~if cond=$r.Kind == Pod ~
      **Pod Ready:** ~$r.ReadyCount~/~$r.Count~
      **Pod Status:** ~$r.Status~
      **Pod Restarts:** ~$r.Restarts~
      **Pod Node:** ~$r.Node~
      ~end~
      ~if cond=$r.Kind == Service ~
      **Service ClusterIP:** ~$r.ClusterIP~
      **Service Type:** ~$r.Type~
      **Service ExternalIP:** ~$r.ExternalIP~
      ~end~
      ~if cond=$r.Kind == Deployment ~
      **Deployment Desired:** ~$r.Desired~
      ~if cond=$r.Current not_empty?~**Deployment Current:** ~$r.Current~~end~
      ~if cond=$r.Available not_empty?~**Deployment Available:** ~$r.Available~~end~
      ~if cond=$r.Unavailable not_empty?~**Deployment Unavailable:** ~$r.Unavailable~~end~
      ~if cond=$r.Updated not_empty?~**Deployment Updated:** ~$r.Updated~~end~
      ~end~
      **~$r.Kind~ Timestamp:** ~$r.Timestamp~
      ~end~
      ~end~
  pod_list:
    body: |
      ~each var=$results as=r~
      ~if cond=$r.Kind == Pod ~
      ~attachment color=$r.Color~
      **Pod Namespace:** ~$r.Namespace~
      **Pod Name:** ~$r.Name~
      **Pod Ready:** ~$r.ReadyCount~/~$r.Count~
      **Pod Status:** ~$r.Status~
      **Pod Restarts:** ~$r.Restarts~
      **Pod Timestamp:** ~$r.Timestamp~
      **Pod Node:** ~$r.Node~
      ~end~
      ~end~
      ~end~
  service_list:
    body: |
      ~each var=$results as=r~
      ~attachment color=$r.Color~
      **Service Namespace:** ~$r.Namespace~
      **Service Name:** ~$r.Name~
      **Service ClusterIP:** ~$r.ClusterIP~
      **Service Type:** ~$r.Type~
      **Service ExternalIP:** ~$r.ExternalIP~
      **Service Timestamp:** ~$r.Timestamp~
      ~end~
      ~end~
  deployment_list:
    body: |
      ~each var=$results as=r~
      ~attachment color=$r.Color~
      **Deployment Namespace:** ~$r.Namespace~
      **Deployment Desired:** ~$r.Desired~
      ~if cond=$r.Current not_empty?~**Deployment Current:** ~$r.Current~~end~
      ~if cond=$r.Available not_empty?~**Deployment Available:** ~$r.Available~~end~
      ~if cond=$r.Unavailable not_empty?~**Deployment Unavailable:** ~$r.Unavailable~~end~
      ~if cond=$r.Updated not_empty?~**Deployment Updated:** ~$r.Updated~~end~
      **Deployment Timestamp:** ~$r.Timestamp~
      ~end~
      ~end~
