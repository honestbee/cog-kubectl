---
cog_bundle_version: 4
name: kubectl
description: Interact with Kubernetes
long_description: >
  This bundle provides commands for exposing kubectl commands through Chat.
  Permissions are used to control which users are authorized to run each command. Listing and searching
  for resources requires the kubectl:read permission. Modifying the state or other
  values of a resource requires the kubectl:write permission. And, destroying a
  resource requires the kubectl:admin permission.
version: 0.1.6
docker:
  image: quay.io/honestbee/cog-kubectl
  tag: 0.1.6
permissions:
  - kubectl:read
  - kubectl:write
  - kubectl:admin
config:
  notes: >
    When creating the service account for use with the following environment
    variables, make sure the RBAC role used has permissions as required.
  env:
    - var: KUBERNETES_TOKEN
      description: Requried service account token for Kubernetes API access
    - var: KUBERNETES_SERVER
      description: Required Kubernetes API endpoint
    - var: KUBERNETES_CERT
      description: Required Kubernetes API certificate for secure execution
commands:
  get:
    description: Display one or many resources.
    executable: /usr/local/bin/cog-command
    long_description: |
      Valid resource types include:

        * clusters (valid only for federation apiservers)
        * componentstatuses (aka 'cs')
        * configmaps (aka 'cm')
        * daemonsets (aka 'ds')
        * deployments (aka 'deploy')
        * endpoints (aka 'ep')
        * events (aka 'ev')
        * horizontalpodautoscalers (aka 'hpa')
        * ingresses (aka 'ing')
        * jobs
        * limitranges (aka 'limits')
        * namespaces (aka 'ns')
        * networkpolicies
        * nodes (aka 'no')
        * persistentvolumeclaims (aka 'pvc')
        * persistentvolumes (aka 'pv')
        * pods (aka 'po')
        * podsecuritypolicies (aka 'psp')
        * podtemplates
        * replicasets (aka 'rs')
        * replicationcontrollers (aka 'rc')
        * resourcequotas (aka 'quota')
        * secrets
        * serviceaccounts (aka 'sa')
        * services (aka 'svc')
        * statefulsets
        * storageclasses
        * thirdpartyresources

      This command will hide resources that have completed. For instance, pods that are in the Succeeded or Failed phases. You can see the full results for any resource by providing the '--show-all' flag.

      kubectl:get pods
    options:
      all-namespaces:
        type: bool
        required: false
        description: If present, list the requested object(s) across all namespaces.
      selector:
        type: list
        required: false
        description: Selector (label query) to filter on
        short_flag: l
      show-all:
        type: bool
        required: false
        description: When printing, show all resources (default hide terminated pods.)
        short_flag: a
      sort-by:
        type: string
        required: false
        description: If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression
    rules:
      - must have kubectl:read
  logs:
    description: Print the logs for a container in a pod or specified resource.
    executable: /usr/local/bin/cog-command
    long_description: |
      Print the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.

      kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [options]
    arguments: "[POD]"
    options:
      container:
        type: string
        required: false
        description: Print the logs of this container
        short_flag: c
      selector:
        type: list
        required: false
        description: Selector (label query) to filter on
        short_flag: l
      previous:
        type: bool
        required: false
        description: If true, print the logs for the previous instance of the container in a pod if it exists. (default print current.)
        short_flag: p
      since:
        type: string
        required: false
        description: Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs.
      tail:
        type: int
        required: false
        description: Lines of recent log file to display. Defaults to 20 with no selector, showing all log lines otherwise 10, if a selector is provided.
      timestamps:
        type: bool
        required: false
        description: Include timestamps on each line in the log output
    rules:
      - must have kubectl:read
  run:
    description: Create and run a particular image, possibly replicated.
    executable: /usr/local/bin/cog-command
    long_description: |
      Creates a deployment or job to manage the created container(s).

      kubectl:run nginx --image=nginx:1.11-alpine --port=80
    options:
      image:
        type: string
        required: true
        description: The image for the container to run.
      port:
        type: int
        required: false
        description: The port that this container exposes.  If --expose is true, this is also the port used by the service that is created.
      expose:
        type: bool
        required: false
        description: If true, a public, external service is created for the container(s) which are run
    rules:
      - must have kubectl:write
  expose:
    description: Expose a resource as a new Kubernetes service.
    executable: /usr/local/bin/cog-command
    long_description: |
      Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.

      Possible resources include (case insensitive):

      pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)

      kubectl expose deployment nginx --port=80 --container-port=8000
    arguments: "RESOUCE_TYPE RESOURCE_NAME"
    options:
      type:
        type: string
        required: false
        description: Type for this service (ClusterIP, NodePort, or LoadBalancer). Default is 'ClusterIP'.
      port:
        type: int
        required: false
        description: The port that the service should serve on. Copied from the resource being exposed, if unspecified
      target-port:
        type: int
        required: false
        description: Name or number for the port on the container that the service should direct traffic to. Optional.
    rules:
      - must have kubectl:write
  scale:
    description: Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.
    executable: /usr/local/bin/cog-command
    long_description: |
      Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.
      Scale also allows users to specify one or more preconditions for the scale action.

      If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.

      kubectl scale --current-replicas=2 --replicas=3 deployment/mysql
    arguments: "RESOUCE_TYPE/RESOURCE_NAME"
    options:
      replicas:
        type: int
        required: true
        description: The new desired number of replicas. Required.
      current-replicas:
        type: int
        required: false
        description: Precondition for current size. Requires that the current size of the resource match this value in order to scale.
    rules:
      - must have kubectl:write
  set-image:
    description: Update image of a pod template.
    executable: /usr/local/bin/cog-sub-command
    long_description: |
      Update existing container image(s) of resources.

      Possible resources include (case insensitive):
        pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs)
    arguments: "RESOURCE_TYPE/RESOURCE_NAME CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N"
    rules:
      - must have kubectl:write
  describe:
    description: Show details of a specific resource or group of resources.
    executable: /usr/local/bin/cog-sub-command
    long_description: |
      This command joins many API calls together to form a detailed description of a given resource or group of resources.

        $ kubectl describe TYPE NAME_PREFIX

      will first check for an exact match on TYPE and NAME PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME PREFIX.
    arguments: "RESOURCE_TYPE/RESOURCE_NAME CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N"
    options:
      selector:
        type: list
        required: false
        description: Selector (label query) to filter on
        short_flag: l
    rules:
      - must have kubectl:read
  delete:
    description: Delete resources by filenames, stdin, resources and names, or by resources and label selector.
    executable: /usr/local/bin/cog-command
    long_description: |
      Resources and label selector are accepted.

      Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource,  you must pass a grace   period of 0 and specify the --force flag.

      IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.

      Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.

      **Note:** Confirmation over Slack not supported
    arguments: "[RESOUCE_TYPE RESOURCE_NAME]"
    options:
      grace-period:
        type: int
        required: false
        description: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative.
      force:
        type: bool
        required: false
        description: Immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.
      selector:
        type: list
        required: false
        description: Selector (label query) to filter on
        short_flag: l
    rules:
      - must have kubectl:admin
templates:
  resource_list:
    body: |
      ~each var=$results as=r~
      ~attachment color=$r.Color~
      **~$r.Kind~ Name:** ~$r.Name~
      **Namespace:** ~$r.Namespace~
      ~if cond=$r.Kind == Pod ~
      **Pod Ready:** ~$r.ReadyCount~/~$r.Count~
      **Pod Status:** ~$r.Status~
      **Pod Restarts:** ~$r.Restarts~
      **Pod Node:** ~$r.Node~
      ~end~
      ~if cond=$r.Kind == Service ~
      **Service ClusterIP:** ~$r.ClusterIP~
      **Service Type:** ~$r.Type~
      **Service ExternalIP:** ~$r.ExternalIP~
      ~end~
      ~if cond=$r.Kind == Deployment ~
      **Deployment Desired:** ~$r.Desired~
      ~if cond=$r.Current not_empty?~**Deployment Current:** ~$r.Current~~end~
      ~if cond=$r.Available not_empty?~**Deployment Available:** ~$r.Available~~end~
      ~if cond=$r.Unavailable not_empty?~**Deployment Unavailable:** ~$r.Unavailable~~end~
      ~if cond=$r.Updated not_empty?~**Deployment Updated:** ~$r.Updated~~end~
      ~end~
      **~$r.Kind~ Timestamp:** ~$r.Timestamp~
      ~end~
      ~end~
